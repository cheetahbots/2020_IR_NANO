
/*
// Create WebSocket connection.
const socket = new WebSocket('ws://localhost:80/api');

// Connection opened
socket.addEventListener('open', function (event) {
    socket.send('Hello Server!');
});

// Listen for messages
socket.addEventListener('message', function (event) {
    console.log('Message from server ', event.data);
});

window.onbeforeunload = function() {
  socket.onclose = function () {}; // disable onclose handler first
  socket.close()
};

var Head = React.createClass({
  render: function() {
    return (
      
    );
  }
});





ReactDOM.render(
  <Head/>,
  document.getElementById('head')
);



/*
var Comment = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author} key={comment.id}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});


ReactDOM.render(
  <CommentBox url="/api/comments" pollInterval={2000} />,
  document.getElementById('content')
);

*/

/*
const ShimmerElementsGroup = window.Fabric.ShimmerElementsGroup
const Shimmer = window.Fabric.Shimmer
const Fabric = window.Fabric
*/

/*
var videoblank = React.createClass({
  _getCustomElementsExampleOne: function () {
    return (
      <div
        // tslint:disable-next-line:jsx-ban-props
        style={{ display: 'flex' }}
      >
        <ShimmerElementsGroup
          shimmerElements={[
            { type: ShimmerElementType.line, width: 40, height: 40 },
            { type: ShimmerElementType.gap, width: 10, height: 40 }
          ]}
        />
        <ShimmerElementsGroup
          flexWrap={true}
          shimmerElements={[
            { type: ShimmerElementType.line, width: 300, height: 10 },
            { type: ShimmerElementType.line, width: 200, height: 10 },
            { type: ShimmerElementType.gap, width: 100, height: 20 }
          ]}
        />
      </div>
    );
  },
  render: function () {
    return (
      <Fabric>
        Using ShimmerElementsGroup component to build complex structures of the placeholder you need.
        <Shimmer customElementsGroup={this._getCustomElementsExampleOne()} width={350} />
        <Shimmer customElementsGroup={this._getCustomElementsExampleOne()} width={550} />
        <Shimmer customElementsGroup={this._getCustomElementsExampleOne()} width={'90%'} />
      </Fabric>
    )
  }
});

ReactDOM.render(
  <videoblank />,
  document.getElementById('content')
);
*/




var ShimmerBasicExample = React.createClass({
  render: function () {
    return (
      <Fabric>
        Basic Shimmer with no elements provided. It defaults to a line of 16px height.
      <Shimmer />
        <Shimmer width="75%" />
        <Shimmer width="50%" />
        Basic Shimmer with elements provided.
      <Shimmer
          shimmerElements={[
            { type: ShimmerElementType.circle },
            { type: ShimmerElementType.gap, width: '2%' },
            { type: ShimmerElementType.line }
          ]}
        />
        <Shimmer
          shimmerElements={[
            { type: ShimmerElementType.circle, height: 24 },
            { type: ShimmerElementType.gap, width: '2%' },
            { type: ShimmerElementType.line, height: 16, width: '20%' },
            { type: ShimmerElementType.gap, width: '5%' },
            { type: ShimmerElementType.line, height: 16, width: '20%' },
            { type: ShimmerElementType.gap, width: '10%' },
            { type: ShimmerElementType.line, height: 16, width: '15%' },
            { type: ShimmerElementType.gap, width: '10%' },
            { type: ShimmerElementType.line, height: 16 }
          ]}
        />
        <Shimmer
          width={'70%'}
          shimmerElements={[
            { type: ShimmerElementType.circle, height: 24 },
            { type: ShimmerElementType.gap, width: '2%' },
            { type: ShimmerElementType.line, height: 16, width: '20%' },
            { type: ShimmerElementType.gap, width: '5%' },
            { type: ShimmerElementType.line, height: 16, width: '20%' },
            { type: ShimmerElementType.gap, width: '10%' },
            { type: ShimmerElementType.line, height: 16, width: '15%' },
            { type: ShimmerElementType.gap, width: '10%' },
            { type: ShimmerElementType.line, height: 16 }
          ]}
        />
        Variations of vertical alignment for Circles and Lines.
      <Shimmer
          shimmerElements={[
            { type: ShimmerElementType.circle },
            { type: ShimmerElementType.gap, width: '2%' },
            { type: ShimmerElementType.circle, height: 15, verticalAlign: 'top' },
            { type: ShimmerElementType.gap, width: '2%' },
            { type: ShimmerElementType.line, verticalAlign: 'bottom', width: '20%' },
            { type: ShimmerElementType.gap, width: '2%' },
            { type: ShimmerElementType.line, height: 5, verticalAlign: 'top', width: '20%' },
            { type: ShimmerElementType.gap, width: '2%' },
            { type: ShimmerElementType.line, height: 16, width: '15%' },
            { type: ShimmerElementType.gap, width: '2%' },
            { type: ShimmerElementType.line, height: 10, verticalAlign: 'bottom' }
          ]}
        />
      </Fabric>
    );
  }
})

const ShimmerBasicExampleWrapper = React.createClass({
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <ShimmerBasicExample/>
      </div>
    );
  }

});
ReactDOM.render(<ShimmerBasicExampleWrapper/>, document.getElementById('content'))